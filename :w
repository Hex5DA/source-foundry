<!-- @layout "default.html" -->

<style>
#contents {
    white-space: pre;
    border: 20px solid var(--a);
    padding: 0;
}

#contents[data-wrap="nowrap"] {
    overflow: scroll;
}
#contents[data-wrap="wrap"] {
    white-space: pre-wrap;
}

.hidden-file {
    color: grey;
    font-style: italic;
}

.row-date {
    font-style: italic;
}

</style>

<h1 id="heading">[ filename ]</h1>
<!-- FALCON: `if`/`else` classes -->

<div id="file">
    <input checked id="wrap" type="checkbox" />
    <!-- on 1 line to prevent whitespace -->
    <pre data-wrap="wrap" id="contents"><code>[ contents ]</code></pre>
</div>
<div id="dir">
    <form>
        <input id="query" type="search" placeholder="query" />
        <button>search</button>
    </form>

    <figure>
        <table>
            <thead>
                <tr>
                    <th>name</th>
                    <th>last commit</th>
                    <th>commit message</th>
                </tr>
            </thead>
            <tbody id="repos">
                <tr id="row">
                    <td><a class="repo-name" href="[ filename ]">[ name ]</a></td>
                    <td class="row-date">[ lastCommit ]</td>
                    <td>[ commitMessage ]</td>
                </tr>
            </tbody>
        </table>
    </figure>
</div>

<link rel="stylesheet" href="/public/code.css">
<script src="/public/lib.js"></script>
<script src="/public/falcon.js"></script>
<script>
    /*
window.$event("load").on = () => {
    let wrap = false;
    $("#wrap").$event("change").on = () => {
        $("#contents").setAttribute("data-wrap", $("#wrap").checked ? "nowrap" : "wrap");
    };

    $("#query").$event("input").on = ev => {
        for (const row of $all("#repos > tr")) {
            const name = row.getElementsByClassName("repo-name")[0].innerText;
            row.style.display = row.id !== "row" && 
                                name.startsWith(ev.target.value) ? "table-row" : "none";
        }
    };

};
    */

$objEvent(server, "load").on = async () => {
    const { fs } = server.imports;
    const filepath = `/home/0x5da/projects/${server.slugs.name}/${server.slugs.filename ?? ""}`;
    $("#heading").$template({ filename: server.slugs.filename  }); // ?? "<i>root</i>"

    if (fs.statSync(filepath).isDirectory()) {
        $("#file").remove();
        const { path, git } = server.imports;

        const gitRoot = "/home/0x5da/projects/";
        const repoName = server.slugs.name;
        const repoPath = `${gitRoot}${repoName}`;
        const repo = git.simpleGit({ baseDir: repoPath });
    
        for (const entry of fs.readdirSync(filepath)) {
            const { latest } = await repo.log({ file: filepath + entry });
            if (!latest) continue; // TODO: wat
    
            $("#row").$templateClone({
                name: entry,
                filename: entry,
                lastCommit: getFormattedTime(latest.date),
                commitMessage: latest.message,
            }, {
                class: entry.startsWith(".") ? "hidden-file" : "",
            });
        }
    } else {
        const { fs, starryNight: { common: langs, createStarryNight }, hastToHtml } = server.imports;
        
        $("#dir").remove();
        $("#heading").$template({ filename: server.slugs.filename });
        const contents = fs.readFileSync(filepath).toString();
    
        const st = await createStarryNight(langs);
        const scope = st.flagToScope(server.slugs.filename.split(".").pop());
        $("#contents").$template({ contents: scope ? hastToHtml(st.highlight(contents, scope)) : contents });
    }
};
</script>
